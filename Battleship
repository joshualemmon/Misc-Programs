//Programmer: Joshua Lemmon
//Date:March 11, 2014
//Purpose: This program is a text based battleship game that allows a user to
//play against a randomized board.

#include <iostream>
#include <cstdlib>
#include <string>
#include "time.h"

using namespace std;

//declaring a class that will handle the board
class Board
{
public:
  Board();
  Board(int x, int y, int l, int o);
  void editBoard(int x, int y, int l, int o);
  void displayBoard();
  bool isFinished();
  bool isFinishedRandom();
  char getBoardValue(int x, int y);
  void missleStrike();
  void missleStrikeRandom(Board *b1);
  int getCount()
  {
    return count;
  }
  int getBoardSize()
  {
      return boardSize;
  }
private:
  char board[10][10];
  const int boardSize=10;
  int count;
};
//declaring a class that will handle the battleships
class Battleship
{
public:
  Battleship();
  Battleship(int l, string t);
  void placeBoat(Board *b);
  void placeBoatRandom(Board *b);
  bool isFree(int o, Board *b, int x, int y);
  bool isFreeRandom(int o, Board *b, int x, int y);
private:
  int shipLength;
  string shipType;
};
//Board class constructor
Board::Board()
{
  //fills board with ~ to represent water
  for (int i = 0; i < boardSize; i++)
  {
    for (int j=0; j < boardSize; j++)
    {
      board[i][j] = '~';
    }
  }
}
//Battleship class constructors
Battleship::Battleship()
{
  shipLength = 0;
  shipType = "";
}
Battleship::Battleship(int l,string t)
{
  shipLength = l;
  shipType = t;
}
//Board member functions

//returns the character on the board at the given co-ordinates
char Board::getBoardValue(int x, int y)
{
  return board[x][y];
}

//this function gets a co-ordinate from the user and checks if its a hit or a
//miss, then changes the board to reflect the hit/miss
void Board::missleStrike()
{
  int x, y;
  cout << "Enter missle strike co-ordinates(1-10):" << endl;
  cin >> x;
  cin >> y;
  while((x < 1 || x > 10 || y < 1 || y > 10)
    ||  (board[y-1][x-1]=='H'|| board[y-1][x-1] == 'M'))
  {
    cout << "Invalid co-ordinate.\nEnter a new one between 1 and 10"
    << "that hasn't been selected already." << endl;
    cin >> x;
    cin >> y;
    //if the user's board already has a hit or miss
  }
  if(board[y-1][x-1] == '*')
  {
    board[y-1][x-1] = 'H';
    cout << "Hit!" << endl;
    count++;
  }
  else if(board[y-1][x-1] == '~')
  {
    board[y-1][x-1] = 'M';
    cout << "Miss!" << endl;
    count++;
  }
}

//allows user to pick co-ordinates to try to hit a ship that was
void Board::missleStrikeRandom(Board *b1)
{
  int x, y;
  cout << "Enter missle strike co-ordinates(1-10):" << endl;
  cin >> x;
  cin >> y;
  while((x < 1 || x > 10 || y < 1 || y > 10)
    ||  (board[y-1][x-1]=='H'|| board[y-1][x-1] == 'M'))
  {
    cout << "Invalid co-ordinate.\nEnter a new one between 1 and 10"
    << "that hasn't been selected already." << endl;
    cin >> x;
    cin >> y;
    //if the user's board already has a hit or miss
  }
  if(b1->getBoardValue(y-1,x-1) == '*')
  {
    board[y-1][x-1] = 'H';
    cout << "Hit!" << endl;
    count++;
  }
  else if(b1->getBoardValue(y-1,x-1) == '~')
  {
    board[y-1][x-1] = 'M';
    cout << "Miss!" << endl;
    count++;
  }
}
//this member function changes the board by adding a boat to it
void Board::editBoard(int x, int y, int l, int o)
{
  for (int i=0; i < l; i++)
  {
    if (o == 1)
    {
      //horizontal placement;
      board[y][x+i] = '*';
    }
    else if (o == 2)
    {
      //vertical placement
      board[y+i][x] = '*';
    }
  }
}
//this member outputs the current board
void Board::displayBoard() {
  cout << "   ";
  for (int i = 0; i < boardSize; i++)
  {
    cout << i+1 << ' ';
  }
  cout << endl;
  for (int i = 0; i < boardSize; i++)
  {
    //minor formatting so all columns and rows are lined up
    if(i+1<10)
    {
      cout << " " << i+1 << ' ';
    }
    else
    {
      cout << i+1 << ' ';
    }
    for (int j=0; j < boardSize; j++)
    {
      cout << board[i][j] << ' ';
    }
    cout << endl;
  }
}
//this member checks if there are any ships left on the board
bool Board::isFinished()
{
  for (int i = 0; i < boardSize; i++)
  {
    for (int j=0; j < boardSize; j++)
    {
      if (board[i][j] == '*')
        return false;
    }
  }
  return true;
}
//this member checks if there are any ships left on the board based on the
//number of hits the user has
bool Board::isFinishedRandom()
{
  int c =0;
  for (int i = 0; i < boardSize; i++)
  {
    for (int j=0; j < boardSize; j++)
    {
      if (board[i][j] == 'H')
      {
        c++;
      }
    }
  }
  return (c==17);
}

//Battleship member functions

//this member allows the user to input co-ordinates in order to place a boat on
//the board
void Battleship::placeBoat(Board *b)
{
  cout << "Place " << shipType << " on board!" << endl;
  //get orientation
  int orientation = -1;
  while (orientation == -1)
  {
    b->displayBoard();
    cout << "Enter orientation of boat:" << endl;
    cout << "\t1. Horizontal" << endl;
    cout << "\t2. Vertical" << endl;
    cout << "> ";
    cin >> orientation;
    if (orientation == 1)
    {
      cout << "Horizontal orientation confirmed." << endl;
    }
    else if (orientation == 2)
    {
      cout << "Vertical orientation confirmed" << endl;
    }
    else
    {
      cout << "Invalid orientation!" << endl;
      orientation = -1;
    }
  }
  //get top/left most coordinate
  int x_coord = -1;
  int y_coord = -1;
  while (x_coord == -1 || y_coord == -1)
  {
    cout << "Enter top/left (X,Y) coordinate of boat: " << endl;
    cout << "(X and Y can be 1.." << (b->getBoardSize()) << ") " << endl;
    cin >> x_coord;
    cin >> y_coord;
    //convert co-ordinates to be usable in the board array
    x_coord -= 1;
    y_coord -= 1;
    cout << "X-coord " << x_coord+1 << " y-coord " << y_coord+1 << endl;
    if ((x_coord >= 0 && x_coord < b->getBoardSize())
      && (y_coord >= 0 && y_coord < b->getBoardSize()))
    {
      if (!isFree(orientation, b, x_coord,y_coord))
      {
        x_coord = -1;
        y_coord = -1;
      }
    }
    else
    {
      cout << "Invalid coordinates!" << endl;
      x_coord = -1;
      y_coord = -1;
    }
  }
  b->editBoard(x_coord,y_coord,shipLength, orientation);
}

//this member randomizes the locations of the battleships
void Battleship::placeBoatRandom(Board *b)
{
  cout << "Placing " << shipType << " on board!" << endl;
  //getting a random orientation
  int orientation = rand()%2+1;

  //getting random coordinate
  int x_coord = -1;
  int y_coord = -1;
  while (x_coord == -1 || y_coord == -1)
  {
    x_coord=rand()%10;
    y_coord=rand()%10;
    if (!isFreeRandom(orientation, b, x_coord,y_coord))
    {
      x_coord = -1;
      y_coord = -1;
    }
  }
  b->editBoard(x_coord,y_coord,shipLength, orientation);
}

//this member checks if the ship is being placed on a tile that already has a
//ship on it
bool Battleship::isFree(int o, Board *b, int x, int y)
{
  //bugfix was swapping the y+shiplength-1 for x+shiplength-1
  if ((o == 1) && (x+shipLength-1 < b->getBoardSize()))
  {
    //horizontal placement;
    for (int i=0; i < shipLength; i++)
    {
      //horizontal placement;
      if (b->getBoardValue(y,(x+i)) == '*')
      {
        cout << "You can't place one boat on top of another!" << endl;
        return false;
      }
    }
    cout << "Coordinates confirmed." << endl;
    return true;
  }
  //bugfix was swapping the x+shiplength-1 for y+shiplength-1
  else if ((o == 2)  && (y+shipLength-1 < b->getBoardSize()))
  {
    //vertical placement
    for (int i=0; i < shipLength; i++)
    {
      //vertical placement;
      if (b->getBoardValue((y+i),x) == '*')
      {
        cout << "You can't place one boat on top of another!" << endl;
        return false;
      }
    }
    cout << "Coordinates confirmed." << endl;
    return true;
  }
  else
  {
    cout << "Invalid coordinates!" << endl;
    return false;
  }
}
//checks if the randomly placed ships overlap
bool Battleship::isFreeRandom(int o, Board *b, int x, int y)
{
  //bugfix was swapping the y+shiplength-1 for x+shiplength-1
  if ((o == 1) && (x+shipLength-1 < b->getBoardSize()))
  {
    //horizontal placement;
    for (int i=0; i < shipLength; i++)
    {
      //horizontal placement;
      if (b->getBoardValue(y,(x+i)) == '*')
      {
        return false;
      }
    }
    return true;
  }
  //bugfix was swapping the x+shiplength-1 for y+shiplength-1
  else if ((o == 2)  && (y+shipLength-1 < b->getBoardSize()))
  {
    //vertical placement
    for (int i=0; i < shipLength; i++)
    {
      //vertical placement;
      if (b->getBoardValue((y+i),x) == '*')
      {
        return false;
      }
    }
    return true;
  }
}


int main()
{
  char answer;
  cout << "Would you like a random board?(Type anything but Y for no): ";
  cin >> answer;
  cout << endl;
  //selecting yess will call member functions created to randomize the placement
  //of the boats, and hides them from the user.
  if(answer == 'Y' || answer == 'y')
  {
    srand(time(NULL));
    //b1 is the board that holds the boats
    Board* b1 = new Board();
    //b2 is the board the user sees
    Board* b2 = new Board();
    //creating boats
    Battleship* s1 = new Battleship(2, "Patrol Boat");
    Battleship* s2 = new Battleship(3, "Destroyer");
    Battleship* s3 = new Battleship(3, "Submarine");
    Battleship* s4 = new Battleship(4, "Battleship");
    Battleship* s5 = new Battleship(5, "Aircraft Carrier");

    //randomly placing boats
    s1->placeBoatRandom(b1);
    s2->placeBoatRandom(b1);
    s3->placeBoatRandom(b1);
    s4->placeBoatRandom(b1);
    s5->placeBoatRandom(b1);

    //lets user try to hit ships
    while (!b2->isFinishedRandom())
    {
      b2->displayBoard();
      b2->missleStrikeRandom(b1);
    }
    b2->displayBoard();
    //outputting some statistics about the game once all boats sunk
    cout << "All ships sunk." << endl;
    cout << "It took you " << b2->getCount() << " turns, and you had an "
         << "accuracy of " << float(17.0/b2->getCount())*100.0 << "%" << endl;
  }
  else
  {
    //creating a board object and 5 battleship objects
    Board* b = new Board();
    Battleship* s1 = new Battleship(2, "Patrol Boat");
    Battleship* s2 = new Battleship(3, "Destroyer");
    Battleship* s3 = new Battleship(3, "Submarine");
    Battleship* s4 = new Battleship(4, "Battleship");
    Battleship* s5 = new Battleship(5, "Aircraft Carrier");

    //prompts user to place boats
    s1->placeBoat(b);
    s2->placeBoat(b);
    s3->placeBoat(b);
    s4->placeBoat(b);
    s5->placeBoat(b);

    //lets user try to hit ships
    while (!b->isFinished())
    {
      b->displayBoard();
      b->missleStrike();
    }
    b->displayBoard();
    //outputting some statistics about the game once all boats sunk
    cout << "All ships sunk." << endl;
    cout << "It took you " << b->getCount() << " turns, and you had an "
         << "accuracy of " << float(17.0/b->getCount())*100.0 << "%" << endl;
  }
}
